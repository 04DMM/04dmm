export default class ClientProt {
    static all: ClientProt[] = [];
    static byId: ClientProt[] = [];

    static readonly NO_TIMEOUT = new ClientProt(6, 107, 0); // NXT naming

    static readonly IDLE_TIMER = new ClientProt(30, 146, 0);

    static readonly EVENT_TRACKING = new ClientProt(34, 217, -2);

    // autogenerated as part of obfuscation process
    static readonly ANTICHEAT_OPLOGIC1 = new ClientProt(60, 47, 4);
    static readonly ANTICHEAT_OPLOGIC2 = new ClientProt(61, 218, 4);
    static readonly ANTICHEAT_OPLOGIC3 = new ClientProt(62, 37, 3);
    static readonly ANTICHEAT_OPLOGIC4 = new ClientProt(63, 34, 2);
    static readonly ANTICHEAT_OPLOGIC5 = new ClientProt(64, 7, 0);
    static readonly ANTICHEAT_OPLOGIC6 = new ClientProt(65, 177, 4);
    static readonly ANTICHEAT_OPLOGIC7 = new ClientProt(66, 50, 4);
    static readonly ANTICHEAT_OPLOGIC8 = new ClientProt(67, 100, 2);
    static readonly ANTICHEAT_OPLOGIC9 = new ClientProt(68, 169, 1);

    // autogenerated as part of obfuscation process
    static readonly ANTICHEAT_CYCLELOGIC1 = new ClientProt(70, 46, 1);
    static readonly ANTICHEAT_CYCLELOGIC2 = new ClientProt(71, 148, -1);
    static readonly ANTICHEAT_CYCLELOGIC3 = new ClientProt(74, 144, 3);
    static readonly ANTICHEAT_CYCLELOGIC4 = new ClientProt(72, 41, 4);
    static readonly ANTICHEAT_CYCLELOGIC5 = new ClientProt(75, 232, 0);
    static readonly ANTICHEAT_CYCLELOGIC6 = new ClientProt(73, 215, -1);

    static readonly OPOBJ1 = new ClientProt(80, 231, 6); // NXT naming
    static readonly OPOBJ2 = new ClientProt(81, 110, 6); // NXT naming
    static readonly OPOBJ3 = new ClientProt(82, 27, 6); // NXT naming
    static readonly OPOBJ4 = new ClientProt(83, 17, 6); // NXT naming
    static readonly OPOBJ5 = new ClientProt(84, 225, 6); // NXT naming
    static readonly OPOBJT = new ClientProt(88, 25, 8); // NXT naming
    static readonly OPOBJU = new ClientProt(89, 111, 12); // NXT naming

    static readonly OPNPC1 = new ClientProt(100, 222, 2); // NXT naming
    static readonly OPNPC2 = new ClientProt(101, 84, 2); // NXT naming
    static readonly OPNPC3 = new ClientProt(102, 132, 2); // NXT naming
    static readonly OPNPC4 = new ClientProt(103, 229, 2); // NXT naming
    static readonly OPNPC5 = new ClientProt(104, 102, 2); // NXT naming
    static readonly OPNPCT = new ClientProt(108, 101, 4); // NXT naming
    static readonly OPNPCU = new ClientProt(109, 52, 8); // NXT naming

    static readonly OPLOC1 = new ClientProt(120, 238, 6); // NXT naming
    static readonly OPLOC2 = new ClientProt(121, 38, 6); // NXT naming
    static readonly OPLOC3 = new ClientProt(122, 19, 6); // NXT naming
    static readonly OPLOC4 = new ClientProt(123, 55, 6); // NXT naming
    static readonly OPLOC5 = new ClientProt(124, 243, 6); // NXT naming
    static readonly OPLOCT = new ClientProt(128, 182, 8); // NXT naming
    static readonly OPLOCU = new ClientProt(129, 106, 12); // NXT naming

    static readonly OPPLAYER1 = new ClientProt(140, 211, 2); // NXT naming
    static readonly OPPLAYER2 = new ClientProt(141, 219, 2); // NXT naming
    static readonly OPPLAYER3 = new ClientProt(142, 64, 2); // NXT naming
    static readonly OPPLAYER4 = new ClientProt(143, 43, 2); // NXT naming
    static readonly OPPLAYERT = new ClientProt(148, 73, 4); // NXT naming
    static readonly OPPLAYERU = new ClientProt(149, 48, 8); // NXT naming

    static readonly OPHELD1 = new ClientProt(160, 228, 6); // name based on runescript trigger
    static readonly OPHELD2 = new ClientProt(161, 166, 6); // name based on runescript trigger
    static readonly OPHELD3 = new ClientProt(162, 221, 6); // name based on runescript trigger
    static readonly OPHELD4 = new ClientProt(163, 6, 6); // name based on runescript trigger
    static readonly OPHELD5 = new ClientProt(164, 133, 6); // name based on runescript trigger
    static readonly OPHELDT = new ClientProt(168, 142, 8); // name based on runescript trigger
    static readonly OPHELDU = new ClientProt(169, 58, 12); // name based on runescript trigger

    static readonly INV_BUTTON1 = new ClientProt(190, 153, 6); // NXT has "IF_BUTTON1" but for our interface system, this makes more sense
    static readonly INV_BUTTON2 = new ClientProt(191, 193, 6); // NXT has "IF_BUTTON2" but for our interface system, this makes more sense
    static readonly INV_BUTTON3 = new ClientProt(192, 158, 6); // NXT has "IF_BUTTON3" but for our interface system, this makes more sense
    static readonly INV_BUTTON4 = new ClientProt(193, 204, 6); // NXT has "IF_BUTTON4" but for our interface system, this makes more sense
    static readonly INV_BUTTON5 = new ClientProt(194, 212, 6); // NXT has "IF_BUTTON5" but for our interface system, this makes more sense
    static readonly IF_BUTTON = new ClientProt(200, 39, 2); // NXT naming

    static readonly RESUME_PAUSEBUTTON = new ClientProt(201, 11, 2); // NXT naming
    static readonly CLOSE_MODAL = new ClientProt(202, 187, 0); // NXT naming
    static readonly RESUME_P_COUNTDIALOG = new ClientProt(203, 190, 4); // NXT naming
    static readonly TUTORIAL_CLICKSIDE = new ClientProt(204, 233, 1);

    static readonly MOVE_OPCLICK = new ClientProt(242, 167, -1); // comes with OP packets, name based on other MOVE packets
    static readonly REPORT_ABUSE = new ClientProt(243, 251, 10);
    static readonly MOVE_MINIMAPCLICK = new ClientProt(244, 56, -1); // NXT naming
    static readonly INV_BUTTOND = new ClientProt(245, 81, 6); // NXT has "IF_BUTTOND" but for our interface system, this makes more sense
    static readonly IGNORELIST_DEL = new ClientProt(246, 207, 8); // NXT naming
    static readonly IGNORELIST_ADD = new ClientProt(247, 203, 8); // NXT naming
    static readonly IF_PLAYERDESIGN = new ClientProt(248, 8, 13);
    static readonly CHAT_SETMODE = new ClientProt(249, 98, 3); // NXT naming
    static readonly MESSAGE_PRIVATE = new ClientProt(250, 170, -1); // NXT naming
    static readonly FRIENDLIST_DEL = new ClientProt(251, 69, 8); // NXT naming
    static readonly FRIENDLIST_ADD = new ClientProt(252, 9, 8); // NXT naming
    static readonly CLIENT_CHEAT = new ClientProt(253, 76, -1); // NXT naming
    static readonly MESSAGE_PUBLIC = new ClientProt(254, 171, -1); // NXT naming
    static readonly MOVE_GAMECLICK = new ClientProt(255, 63, -1); // NXT naming

    // in these old revisions we can actually get the packet index from a leftover array in the client source
    constructor(
        readonly index: number,
        readonly id: number,
        readonly length: number
    ) {
        ClientProt.all[index] = this;
        ClientProt.byId[id] = this;
    }
}
