// Sigil activation bindings
[opheld1,sigil_herb1] ~activate_sigil(last_slot);
[opheld1,sigil_prayer1] ~activate_sigil(last_slot);
[opheld1,sigil_fish1] ~activate_sigil(last_slot);
[opheld1,sigil_smith1] ~activate_sigil(last_slot);
[opheld1,sigil_fletch1] ~activate_sigil(last_slot);
[opheld1,sigil_thief1] ~activate_sigil(last_slot);
[opheld1,sigil_range3] ~activate_sigil(last_slot);
[opheld1,sigil_wc1] ~activate_sigil(last_slot);
[opheld1,sigil_fm1] ~activate_sigil(last_slot);
[opheld1,sigil_melee1] ~activate_sigil(last_slot);
[opheld1,sigil_range1] ~activate_sigil(last_slot);
[opheld1,sigil_mage1] ~activate_sigil(last_slot);
[opheld1,sigil_alch1] ~activate_sigil(last_slot);

[opheld1,sigil_defence1] ~activate_sigil(last_slot);

// Sigil destroy bindings (active forms)
[opheld5,sigil_herb1_active] ~destroy_sigil(last_slot);
[opheld5,sigil_prayer1_active] ~destroy_sigil(last_slot);
[opheld5,sigil_fish1_active] ~destroy_sigil(last_slot);
[opheld5,sigil_smith1_active] ~destroy_sigil(last_slot);
[opheld5,sigil_fletch1_active] ~destroy_sigil(last_slot);
[opheld5,sigil_thief1_active] ~destroy_sigil(last_slot);
[opheld5,sigil_range3_active] ~destroy_sigil(last_slot);
[opheld5,sigil_wc1_active] ~destroy_sigil(last_slot);
[opheld5,sigil_fm1_active] ~destroy_sigil(last_slot);
[opheld5,sigil_melee1_active] ~destroy_sigil(last_slot);
[opheld5,sigil_range1_active] ~destroy_sigil(last_slot);
[opheld5,sigil_mage1_active] ~destroy_sigil(last_slot);
[opheld5,sigil_alch1_active] ~destroy_sigil(last_slot);

[opheld5,sigil_defence1_active] ~destroy_sigil(last_slot);

// Sigil deactivation bindings
[opheld1,sigil_herb1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_prayer1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_fish1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_smith1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_fletch1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_thief1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_range3_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_wc1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_fm1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_melee1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_range1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_mage1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_alch1_active] ~deactivate_sigil(last_slot);

[opheld1,sigil_defence1_active] ~deactivate_sigil(last_slot);

// Cannoneering handler
[opheld2,sigil_range3_active] ~fire_cannon(last_slot);

[proc,destroy_sigil] (int $last_slot) {
   def_obj $sigilobj = inv_getobj(inv, $last_slot);

   def_int $choice = ~p_choice2_header("Yes", 1, "No", 2, "Are you sure? It will be destroyed!");
   if ($choice = 1) {

    switch_obj($sigilobj) {
        case sigil_herb1_active :
            %sigil_herb1 = false;
        case sigil_prayer1_active :
            %sigil_prayer1 = false;
        case sigil_fish1_active :
            %sigil_fish1 = false;
        case sigil_smith1_active :
            %sigil_smith1 = false;
        case sigil_fletch1_active :
            %sigil_fletch1 = false;
        case sigil_thief1_active :
            %sigil_thief1 = false;
        case sigil_range3_active :
            cleartimer(sigil_cannon_rotate);
            %sigil_range3 = false;
        case sigil_wc1_active :
            %sigil_wc1 = false;
        case sigil_fm1_active :
            %sigil_fm1 = false;
        case sigil_melee1_active :
            %sigil_melee1 = false;
        case sigil_range1_active :
            %sigil_range1 = false;
        case sigil_mage1_active :
            %sigil_mage1 = false;
        case sigil_alch1_active :
            %sigil_alch1 = false;
        case sigil_defence1_active :
            %sigil_defence1 = false;
            ~update_bonuses;
            ~player_combat_stat;
    }
     
     inv_delslot(inv, $last_slot);
   } else if ($choice = 2) {
      return;
   }   
}

[proc,activate_sigil](int $last_slot) {
    def_obj $sigilobj = inv_getobj(inv, $last_slot);

    if (~inzone_coord_pair_table(bank_zones, coord) = false) {
      mes("You can't tap your sigil outside of a bank.");
      return;
     } 

    def_namedobj $active_form = oc_param($sigilobj, next_obj_stage);
    def_int $t_inv = inv_total(inv, $active_form);
    def_int $t_bank = inv_total(bank, $active_form);

    if ($t_inv > 0 | $t_bank > 0) {
       mes("You can only have one sigil of this type active at a time.");
       return;
    }

    if (~count_sigils >= 3) {
        mes("You already have 3 active sigils. Deactivate one to use");
    } else {
        switch_obj($sigilobj) {
            case sigil_defence1 :
                %sigil_defence1 = true;
                ~update_bonuses;
                ~player_combat_stat;
            case sigil_herb1 :
                %sigil_herb1 = true;
            case sigil_prayer1 :
                %sigil_prayer1 = true;
            case sigil_fish1 :
                %sigil_fish1 = true;
            case sigil_smith1 :
                %sigil_smith1 = true;
            case sigil_fletch1 :
                %sigil_fletch1 = true;
            case sigil_thief1 :
                %sigil_thief1 = true;
            case sigil_range3 :
                %sigil_range3 = true;
            case sigil_wc1 :
                %sigil_wc1 = true;
            case sigil_fm1 :
                %sigil_fm1 = true;
            case sigil_melee1 :
                p_run(^player_run_off);
                %sigil_melee1 = true;
            case sigil_range1 :
                %sigil_range1 = true;
            case sigil_mage1 :
                %sigil_mage1 = true;
            case sigil_alch1 :
                %sigil_alch1 = true;
        }

        anim(human_runecraft, 0);
        spotanim_pl(runecrafting, 96, 0);
        sound_synth(fire_blast_all, 0, 0);

        inv_setslot(inv, $last_slot, oc_param($sigilobj, next_obj_stage), 1);
        mes("Sigil tapped.");
    }
}

[proc,deactivate_sigil](int $last_slot) {
    if (~inzone_coord_pair_table(bank_zones, coord) = false) {
      mes("You can't untap your sigil outside of a bank.");
      return;
     }

    def_obj $sigilobj = inv_getobj(inv, $last_slot);
  
    switch_obj($sigilobj) {
        case sigil_herb1_active :
            %sigil_herb1 = false;
        case sigil_prayer1_active :
            %sigil_prayer1 = false;
        case sigil_fish1_active :
            %sigil_fish1 = false;
        case sigil_smith1_active :
            %sigil_smith1 = false;
        case sigil_fletch1_active :
            %sigil_fletch1 = false;
        case sigil_thief1_active :
            %sigil_thief1 = false;
        case sigil_range3_active :
            cleartimer(sigil_cannon_rotate);
            %sigil_range3 = false;
        case sigil_wc1_active :
            %sigil_wc1 = false;
        case sigil_fm1_active :
            %sigil_fm1 = false;
        case sigil_melee1_active :
            %sigil_melee1 = false;
        case sigil_range1_active :
            %sigil_range1 = false;
        case sigil_mage1_active :
            %sigil_mage1 = false;
        case sigil_alch1_active :
            %sigil_alch1 = false;
        case sigil_defence1_active :
            %sigil_defence1 = false;
            ~update_bonuses;
            ~player_combat_stat;
    }

        anim(human_runecraft, 0);
        spotanim_pl(runecrafting, 96, 0);
        sound_synth(fire_strike_fail, 0, 0);

    inv_setslot(inv, $last_slot, oc_param($sigilobj, next_obj_stage), 1);
    mes("Untapped sigil.");
}

[proc,count_sigils]()(int) {
    def_int $count = 0;
    if (%sigil_herb1 = true) { $count = calc($count + 1); }
    if (%sigil_prayer1 = true) { $count = calc($count + 1); }
    if (%sigil_fish1 = true) { $count = calc($count + 1); }
    if (%sigil_smith1 = true) { $count = calc($count + 1); }
    if (%sigil_fletch1 = true) { $count = calc($count + 1); }
    if (%sigil_thief1 = true) { $count = calc($count + 1); }
    if (%sigil_range3 = true) { $count = calc($count + 1); }
    if (%sigil_wc1 = true) { $count = calc($count + 1); }
    if (%sigil_fm1 = true) { $count = calc($count + 1); }
    if (%sigil_melee1 = true) { $count = calc($count + 1); }
    if (%sigil_range1 = true) { $count = calc($count + 1); }
    if (%sigil_mage1 = true) { $count = calc($count + 1); }
    if (%sigil_alch1 = true) { $count = calc($count + 1); }
    if (%sigil_defence1 = true) { $count = calc($count + 1); }
    //mes("Active sigil count <tostring($count)>");
    return($count);
}


[proc,fire_cannon](int $last_slot) {
   if (gettimer(sigil_cannon_rotate) > 0) {
       cleartimer(sigil_cannon_rotate);
   } else {
       settimer(sigil_cannon_rotate, 1, 0);
   }
}

