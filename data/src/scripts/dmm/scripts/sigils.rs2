// Sigil activation bindings
[opheld1,sigil_herb1] ~activate_sigil(last_slot);
[opheld1,sigil_prayer1] ~activate_sigil(last_slot);
[opheld1,sigil_fish1] ~activate_sigil(last_slot);
[opheld1,sigil_smith1] ~activate_sigil(last_slot);
[opheld1,sigil_fletch1] ~activate_sigil(last_slot);
[opheld1,sigil_thief1] ~activate_sigil(last_slot);
[opheld1,sigil_range3] ~activate_sigil(last_slot);
[opheld1,sigil_wc1] ~activate_sigil(last_slot);
[opheld1,sigil_fm1] ~activate_sigil(last_slot);
[opheld1,sigil_melee1] ~activate_sigil(last_slot);
[opheld1,sigil_range1] ~activate_sigil(last_slot);
[opheld1,sigil_mage1] ~activate_sigil(last_slot);
[opheld1,sigil_alch1] ~activate_sigil(last_slot);

// Destroy
[opheld5,sigil_herb1] ~destroy_sigil(last_slot);

// Sigil deactivation bindings
[opheld1,sigil_herb1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_prayer1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_fish1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_smith1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_fletch1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_thief1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_range3_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_wc1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_fm1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_melee1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_range1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_mage1_active] ~deactivate_sigil(last_slot);
[opheld1,sigil_alch1_active] ~deactivate_sigil(last_slot);

[proc,destroy_sigil] (int $last_slot) {
   mes("Destroying sigil.");
}

[proc,activate_sigil](int $last_slot) {
    def_obj $sigilobj = inv_getobj(inv, $last_slot);

  

    if (~count_sigils >= 3) {
        mes("You already have 3 active sigils. Deactivate one to use");
    } else {
        switch_obj($sigilobj) {
            case sigil_herb1 :
                %sigil_herb1 = true;
            case sigil_prayer1 :
                %sigil_prayer1 = true;
            case sigil_fish1 :
                %sigil_fish1 = true;
            case sigil_smith1 :
                %sigil_smith1 = true;
            case sigil_fletch1 :
                %sigil_fletch1 = true;
            case sigil_thief1 :
                %sigil_thief1 = true;
            case sigil_range3 :
                %sigil_range3 = true;
            case sigil_wc1 :
                %sigil_wc1 = true;
            case sigil_fm1 :
                %sigil_fm1 = true;
            case sigil_melee1 :
                %sigil_melee1 = true;
            case sigil_range1 :
                %sigil_range1 = true;
            case sigil_mage1 :
                %sigil_mage1 = true;
            case sigil_alch1 :
                %sigil_alch1 = true;
        }

        anim(human_runecraft, 0);
        spotanim_pl(runecrafting, 96, 0);
        sound_synth(fire_blast_all, 0, 0);

        inv_setslot(inv, $last_slot, oc_param($sigilobj, next_obj_stage), 1);
        mes("Sigil tapped.");
    }
}

[proc,deactivate_sigil](int $last_slot) {
    def_obj $sigilobj = inv_getobj(inv, $last_slot);
  
    switch_obj($sigilobj) {
        case sigil_herb1_active :
            %sigil_herb1 = false;
        case sigil_prayer1_active :
            %sigil_prayer1 = false;
        case sigil_fish1_active :
            %sigil_fish1 = false;
        case sigil_smith1_active :
            %sigil_smith1 = false;
        case sigil_fletch1_active :
            %sigil_fletch1 = false;
        case sigil_thief1_active :
            %sigil_thief1 = false;
        case sigil_range3_active :
            %sigil_range3 = false;
        case sigil_wc1_active :
            %sigil_wc1 = false;
        case sigil_fm1_active :
            %sigil_fm1 = false;
        case sigil_melee1_active :
            %sigil_melee1 = false;
        case sigil_range1_active :
            %sigil_range1 = false;
        case sigil_mage1_active :
            %sigil_mage1 = false;
        case sigil_alch1_active :
            %sigil_alch1 = false;
    }

        anim(human_runecraft, 0);
        spotanim_pl(runecrafting, 96, 0);
        sound_synth(fire_strike_fail, 0, 0);

    inv_setslot(inv, $last_slot, oc_param($sigilobj, next_obj_stage), 1);
    mes("Untapped sigil.");
}

[proc,count_sigils]()(int) {
    def_int $count = 0;
    if (%sigil_herb1 = true) { $count = calc($count + 1); }
    if (%sigil_prayer1 = true) { $count = calc($count + 1); }
    if (%sigil_fish1 = true) { $count = calc($count + 1); }
    if (%sigil_smith1 = true) { $count = calc($count + 1); }
    if (%sigil_fletch1 = true) { $count = calc($count + 1); }
    if (%sigil_thief1 = true) { $count = calc($count + 1); }
    if (%sigil_range3 = true) { $count = calc($count + 1); }
    if (%sigil_wc1 = true) { $count = calc($count + 1); }
    if (%sigil_fm1 = true) { $count = calc($count + 1); }
    if (%sigil_melee1 = true) { $count = calc($count + 1); }
    if (%sigil_range1 = true) { $count = calc($count + 1); }
    if (%sigil_mage1 = true) { $count = calc($count + 1); }
    if (%sigil_alch1 = true) { $count = calc($count + 1); }
    //mes("Active sigil count <tostring($count)>");
    return($count);
}
