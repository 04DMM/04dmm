[proc,player_die]
if (.finduid(%duelpartner) = true) {
    if (~.in_duel_arena(.coord) = true & ~in_duel_arena(coord) = true) {
        queue(player_death_duel, 0);
        return;
    }
}
queue(player_death_default, 0);

[proc,player_death]
%death = ^true;
p_delay(1);
p_stopaction;
if_close;
anim(human_death, 0);
p_delay(3);
%death = ^false;

[proc,wipe_stats]
def_int $i = 0;
while ($i <= enum_getoutputcount(stats)) {
    def_stat $stat = enum(int, stat, stats, $i);

    
    stat_wipe($stat);
    
    $i = calc($i + 1);
}

//stat_advance(hitpoints, 1154);

[proc,reset_wipe]
~wipe_stats;
//~reset_all_quests;
//inv_clear(bank);
//inv_clear(inv);
//inv_clear(worn);

p_teleport(0_48_48_22_35);

//%thieving_stall_timer = 0;
%cat_growth = 0;
%follower_obj = null;
%follower_uid = null;
//%handelmort_traps_disabled = 0;
//%thread_used = 0;
//%magearena = 0;
//%bunny_ears_unlocked = 0;
//%scythe_unlocked = 0;
%tutorial_progress = 0;

p_logout;

[queue,player_death_default]
~player_death;
~midi_jingle(^death_jingle_2, ^death_jingle_2_millis);
// https://storage.googleapis.com/tannerdino/images/6543.jpg
// https://youtu.be/gWmwSYxzUfo
mes("Oh dear you are dead!");

~combat_clearqueue;
clearqueue(player_death_default);

def_obj $prev_wep = inv_getobj(worn, ^wearpos_rhand);
if (findhero = true) {
    ~pvp_death_lose_items;
    session_log(^log_moderator, "Player died to <.displayname>");
} else {
    ~player_death_lose_items;
    // todo: what npc killed the player
    session_log(^log_moderator, "Player died");
}
//p_teleport(map_findsquare(0_50_50_21_18, 0, 2, ^map_findsquare_lineofwalk));
//buildappearance(worn);
~prayer_deactivate_all;
~follower_death;
anim(null, 0);
p_stopaction;

~stat_reset_all;
healenergy(10000);
~clear_pk_skull;
~clear_poison;
~update_all($prev_wep);
~initalltabs;
// todo: end poison timer ~player_end_poison

~reset_wipe;


[proc,player_death_lose_items]
if (staffmodlevel > 1 & map_production = true) { return; }

//~reset_wipe;

def_boolean $skulled = false;
if (%pk_skull > 0) { $skulled = true; }
def_boolean $protecting_item = false;
if (%prayer_protectitems = ^true) { $protecting_item = true; }
inv_clear(deathkeep);

//if($skulled = false) {
//    ~move_priciest_item_on_hero_to_death;
//    ~move_priciest_item_on_hero_to_death;
//    ~move_priciest_item_on_hero_to_death;
//}
//if($protecting_item = true) {
//    ~move_priciest_item_on_hero_to_death;
//}

def_int $i = 0;
def_int $size = inv_size(inv);
while ($i < $size) {
    def_obj $iobj = inv_getobj(inv, $i);
    if (inv_getnum(inv, $i) > 0) {
        if (oc_category(inv_getobj(inv, $i)) = armour_godcape) {
            mes(oc_param(inv_getobj(inv, $i), lose_cape_message));
        }
        if (oc_tradeable($iobj) = false) {
           inv_moveitem(inv,deathkeep,$iobj,1);
        }
    }
    $i = calc($i + 1);
}

$i = 0;
$size = inv_size(worn);
while ($i < $size) {
    if (inv_getnum(worn, $i) > 0) {
        def_obj $iobj = inv_getobj(inv, $i);
        if (oc_category(inv_getobj(worn, $i)) = armour_godcape) {
            mes(oc_param(inv_getobj(worn, $i), lose_cape_message));
        }
        if (oc_tradeable($iobj) = false) {
           inv_moveitem(inv,deathkeep,$iobj,1);
        }
    }
    $i = calc($i + 1);
}

$i = 0;
$size = inv_size(bank);
while ($i < $size) {
 def_obj $item = inv_getobj(bank, $i);
 def_int $total = inv_total(bank, $item);
 if ($item ! null) {
  if (~is_starter_kit_item($item) = true) {
    // Do nothing
  } else if (oc_tradeable($item) = false) {
    // Do nothing
  } else {
     inv_delslot(bank, $i);
  }
  
 }
  $i = calc($i + 1);
}

//inv_dropall(inv, coord, ^lootdrop_duration);
//inv_dropall(worn, coord, ^lootdrop_duration);
obj_addall(coord, bones, 1, ^lootdrop_duration);
~moveallinv(deathkeep, inv);
inv_clear(deathkeep);


[softtimer,pvpimmunity_timer] 
if (%pvpimmunity = 0) {
  clearsofttimer(pvpimmunity_timer);
}
%pvpimmunity = sub(%pvpimmunity, 1);






[proc,pvp_death_lose_items]
~pvp_death_message(.uid);
if (staffmodlevel > 1 & map_production = true) { return; }

//def_boolean $skulled = false;
//if (%pk_skull > 0) { $skulled = true; }
//def_boolean $protecting_item = false;
//if (%prayer_protectitems = ^true) { $protecting_item = true; }
//inv_clear(deathkeep);

//if($skulled = false) {
//    ~move_priciest_item_on_hero_to_death;
//    ~move_priciest_item_on_hero_to_death;
//    ~move_priciest_item_on_hero_to_death;
//}
//if($protecting_item = true) {
//    ~move_priciest_item_on_hero_to_death;
//}

def_int $i = 0;
def_int $size = inv_size(inv);
while ($i < $size) {
    if (inv_getnum(inv, $i) > 0) {
        def_obj $iobj = inv_getobj(inv, $i);
        if (oc_category(inv_getobj(inv, $i)) = armour_godcape) {
            mes(oc_param(inv_getobj(inv, $i), lose_cape_message));
            inv_delslot(inv, $i);
        } else if (oc_tradeable($iobj) = false) {
            // Do nothing, leave in inv 
            inv_moveitem(inv,deathkeep,$iobj,1);
        } else {
            def_obj $item = inv_getobj(inv, $i);
            def_int $total = inv_total(inv, $item);
            if (~is_starter_kit_item($item) = true) {

            } else {
              //both_dropslot(inv, coord, $i, ^lootdrop_duration);
             inv_del(inv, $item, $total); 
             .obj_add(coord, $item, $total, ^lootdrop_duration);
            }
           
        }
    }
    $i = calc($i + 1);
}

$i = 0;
$size = inv_size(worn);
while ($i < $size) {
    if (inv_getnum(worn, $i) > 0) {
        def_obj $iobj = inv_getobj(worn, $i);
        if (oc_category(inv_getobj(worn, $i)) = armour_godcape) {
            mes(oc_param(inv_getobj(worn, $i), lose_cape_message));
            inv_delslot(worn, $i);
        } else if (oc_tradeable($iobj) = false) {
            inv_moveitem(worn,deathkeep,$iobj, 1);
        } else {
            // Change so that items only show for the person that killed you
            //both_dropslot(worn, coord, $i, ^lootdrop_duration);
            def_obj $item = inv_getobj(worn, $i);
            def_int $total = inv_total(worn, $item);
            if (~is_starter_kit_item($item) = true) {

            } else {
              //both_dropslot(worn, coord, $i, ^lootdrop_duration);
              inv_delslot(worn, $i);
              .obj_add(coord, $item, $total, ^lootdrop_duration);
            }
        }
    }
    $i = calc($i + 1);
}

$i = 0;
$size = inv_size(bank);
while ($i < $size) {
  def_obj $item = inv_getobj(bank, $i);
  def_int $total = inv_total(bank, $item);
  if ($item ! null) {
  if (~is_starter_kit_item($item) = true) {
    // Do nothing
  } else if (oc_tradeable($item) = false) {
    // Do nothing
  } else {
     inv_delslot(bank, $i);
     if (oc_cert($item) = $item) {
      .obj_add(coord, $item, $total, ^lootdrop_duration);
     } else {
      .obj_add(coord, oc_cert($item), $total, ^lootdrop_duration);
     }
  }
  }
  $i = calc($i + 1);
}
.mes("Your opponent's bank items have been dropped to the floor.");

//if (p_finduid(.uid) = true) {
//  .%pvpimmunity = 100;
//  .softtimer(pvpimmunity_timer, 1);  
//}


// The person who killed this player becomes immune for 1 minute
.%pvpimmunity = 100;
.softtimer(pvpimmunity_timer, 1);


.obj_add(coord, bones, 1, ^lootdrop_duration);

~moveallinv(deathkeep, inv);
inv_clear(deathkeep);


[proc,is_starter_kit_item](obj $item)(boolean)
if ($item = starterkit | $item = tuna | $item = starterstaff | $item = startersword | $item = starterbow) {
  return(true);
} else {
  return(false);
}

[proc,move_priciest_item_on_hero_to_death]
def_obj $priciest_item;
def_obj $currentitem;
def_int $biggest_price = 0;
def_int $size_inv = inv_size(inv);
def_int $size_worn = inv_size(worn);
def_boolean $is_worn = false;
def_int $i = 0;
while ($i < $size_inv) {
    if (inv_getnum(inv, $i) > 0) {
        $currentitem = inv_getobj(inv, $i);
        if (oc_param($currentitem, destroy_death) ! ^true) {
            if (oc_cost($currentitem) > $biggest_price) {
                $biggest_price = oc_cost($currentitem);
                $priciest_item = $currentitem;
            }
        }
    }
    $i = calc($i + 1);
}
$i = 0;
while ($i < $size_worn) {
    if (inv_getnum(worn, $i) > 0) {
        $currentitem = inv_getobj(worn, $i);
        if (oc_param($currentitem, destroy_death) ! ^true) {
            if (oc_cost($currentitem) > $biggest_price) {
                $is_worn = true;
                $biggest_price = oc_cost($currentitem);
                $priciest_item = $currentitem;
            }
        }
    }
    $i = calc($i + 1);
}

if($priciest_item = null ) {
    return;
}
if($is_worn = true) {
    inv_moveitem(worn,deathkeep,$priciest_item,1);
} else {
    inv_moveitem(inv,deathkeep,$priciest_item,1);
}

[debugproc,death]
~damage_self(999);

[debugproc,damage]
queue(damage_player, 0, 100);
