[opheld1,macro_genilamp]
%xplamp = ^xplamp_none;
if_openmain(xplamp);

[if_button,xplamp:attack] @xplamp_select(attack);
[if_button,xplamp:strength] @xplamp_select(strength);
[if_button,xplamp:ranged] @xplamp_select(ranged);
[if_button,xplamp:magic] @xplamp_select(magic);
[if_button,xplamp:defence] @xplamp_select(defence);
[if_button,xplamp:hitpoints] @xplamp_select(hitpoints);
[if_button,xplamp:prayer] @xplamp_select(prayer);
[if_button,xplamp:agility] @xplamp_select(agility);
[if_button,xplamp:herblore] @xplamp_select(herblore);
[if_button,xplamp:thieving] @xplamp_select(thieving);
[if_button,xplamp:crafting] @xplamp_select(crafting);
[if_button,xplamp:runecraft] @xplamp_select(runecraft);
[if_button,xplamp:mining] @xplamp_select(mining);
[if_button,xplamp:smithing] @xplamp_select(smithing);
[if_button,xplamp:fishing] @xplamp_select(fishing);
[if_button,xplamp:cooking] @xplamp_select(cooking);
[if_button,xplamp:firemaking] @xplamp_select(firemaking);
[if_button,xplamp:woodcutting] @xplamp_select(woodcutting);
[if_button,xplamp:fletching] @xplamp_select(fletching);

[if_button,xplamp:confirm]

switch_int (%xplamp) {
    case ^xplamp_none :
        mes("You need to choose which skill you wish to be advanced.");
        return;
    case ^xplamp_attack : @xplamp_confirm(attack);
    case ^xplamp_strength : @xplamp_confirm(strength);
    case ^xplamp_ranged : @xplamp_confirm(ranged);
    case ^xplamp_magic : @xplamp_confirm(magic);
    case ^xplamp_defence : @xplamp_confirm(defence);
    case ^xplamp_hitpoints : @xplamp_confirm(hitpoints);
    case ^xplamp_prayer : @xplamp_confirm(prayer);
    case ^xplamp_agility : @xplamp_confirm(agility);
    case ^xplamp_herblore : @xplamp_confirm(herblore);
    case ^xplamp_thieving : @xplamp_confirm(thieving);
    case ^xplamp_crafting : @xplamp_confirm(crafting);
    case ^xplamp_runecraft : @xplamp_confirm(runecraft);
    case ^xplamp_mining : @xplamp_confirm(mining);
    case ^xplamp_smithing : @xplamp_confirm(smithing);
    case ^xplamp_fishing : @xplamp_confirm(fishing);
    case ^xplamp_cooking : @xplamp_confirm(cooking);
    case ^xplamp_firemaking : @xplamp_confirm(firemaking);
    case ^xplamp_woodcutting : @xplamp_confirm(woodcutting);
    case ^xplamp_fletching : @xplamp_confirm(fletching);
}
error("case not found for xplamp varp: <tostring(%xplamp)>");

[label,xplamp_select](stat $stat)
if (map_members = ^false & ~stat_members($stat) = ^true) {
    mes("You need to be on a members' world to gain experience in <~stat_name($stat)>.");
    %xplamp = ^xplamp_none;
    return;
}
switch_stat ($stat) {
    case attack : @xplamp_select_stat(^xplamp_attack);
    case strength : @xplamp_select_stat(^xplamp_strength);
    case ranged : @xplamp_select_stat(^xplamp_ranged);
    case magic : @xplamp_select_stat(^xplamp_magic);
    case defence : @xplamp_select_stat(^xplamp_defence);
    case hitpoints : @xplamp_select_stat(^xplamp_hitpoints);
    case prayer : @xplamp_select_stat(^xplamp_prayer);
    case agility : @xplamp_select_stat(^xplamp_agility);
    case herblore : @xplamp_select_stat(^xplamp_herblore);
    case thieving : @xplamp_select_stat(^xplamp_thieving);
    case crafting : @xplamp_select_stat(^xplamp_crafting);
    case runecraft : @xplamp_select_stat(^xplamp_runecraft);
    case mining : @xplamp_select_stat(^xplamp_mining);
    case smithing : @xplamp_select_stat(^xplamp_smithing);
    case fishing : @xplamp_select_stat(^xplamp_fishing);
    case cooking : @xplamp_select_stat(^xplamp_cooking);
    case firemaking : @xplamp_select_stat(^xplamp_firemaking);
    case woodcutting : @xplamp_select_stat(^xplamp_woodcutting);
    case fletching : @xplamp_select_stat(^xplamp_fletching);
}
error("case not found for stat: <enum(stat, string, stat_names, $stat)>");

[label,xplamp_select_stat](int $selection)
switch_int ($selection) {
    case ^xplamp_herblore :
        if (%druid_progress ! ^druid_complete) {
            %xplamp = ^xplamp_none;
            mes("You need to complete the Druidic Ritual quest to choose that option.");
            return;
        }
    case ^xplamp_runecraft :
        if (%runemysteries_progress ! ^runemysteries_complete) {
            %xplamp = ^xplamp_none;
            mes("You need to complete the Rune Mysteries quest to choose that option.");
            return;
        }
}
%xplamp = $selection;

[label,xplamp_confirm](stat $stat)
// sanity check
if (map_members = ^false & ~stat_members($stat) = ^true) {
    mes("You need to be on a members' world to gain experience in <~stat_name($stat)>.");
    %xplamp = ^xplamp_none;
    return;
}

if_close;
inv_del(inv, macro_genilamp, 1);
%xplamp = ^xplamp_none;

def_int $base_level = stat_base($stat);
stat_advance($stat, multiply($base_level, 100)); // stat level * 10
sound_synth(found_gem, 0, 0);

mes("Your wish has been granted! You have been awarded <tostring(multiply($base_level, 10))> <enum(stat, string, stat_names, $stat)> experience!");
~complete_random_quest;

[proc,complete_random_quest]
        def_int $int1 = 0;
        def_string $string1 = "";
        def_int $int2 = 0;
        def_string $string2 = "";
        def_int $int3 = 0;
        def_string $string3 = "";

        def_int $page = 0;
        def_int $choice2 = -1;
        def_int $max_pages = divide(add(enum_getoutputcount(quest_names_enum), 1), 3);

        while ($choice2 = -1 | $choice2 = -2) {
            $int1 = multiply($page, 3);
            $string1 = enum(int, string, quest_names_enum, $int1);
            $int2 = add($int1, 1);
            $string2 = enum(int, string, quest_names_enum, $int2);
            $int3 = add($int2, 1);
            $string3 = enum(int, string, quest_names_enum, $int3);
            $choice2 = ~p_choice5_header("Prev.", -1, "<tostring($int1)>. <$string1>", $int1, "<tostring($int2)>. <$string2>", $int2, "<tostring($int3)>. <$string3>", $int3, "Next.", -2, "Choose a quest: (Page <tostring($page)>/<tostring($max_pages)>)");
            if ($choice2 = -1 & $page ! 0) {
                $page = sub($page, 1);
            } else if ($choice2 = -2 & $page ! $max_pages) {
                $page = add($page, 1);
            }
        }
        def_int $quest = $choice2;


switch_int ($quest) {
                case 0 : queue(black_knights_fortress_quest_complete, 0); 
                case 1 : queue(cooks_quest_complete, 0); 
                case 2 : queue(demon_slayer_complete, 0);
                case 3 : queue(doric_quest_complete, 0);
                case 4 : queue(dragon_complete, 0);
                case 5 :
                    ~change_ernest;
                    %haunted_progress = ^haunted_complete;
                    queue(haunted_quest_complete, 0);
                case 6 : queue(goblin_diplomacy_complete_quest, 0);
                case 7 : queue(squire_complete, 0);
                case 8 : queue(imp_quest_complete, 0);
                case 9 : queue(hunt_quest_complete, 0);
                case 10 : queue(prince_complete, 0);
                case 11 : queue(priest_quest_complete, 0);
                case 12 : queue(romeo_and_juliet_complete, 0);
                case 13 : queue(rune_mysteries_complete, 0);
                case 14 : queue(sheep_complete, 0);
                case 15 : 
                    switch_int(~p_choice2_header("Black Arm Gang.", 0, "Phoenix Gang.", 1, "Choose a gang for Shield of Arrav:")) {
                        case 0 : %phoenixgang_progress = ^phoenixgang_not_started;
                        case 1 : %phoenixgang_progress = ^phoenixgang_joined;
                    }
                    queue(blackarmgang_quest_complete, 0);
                case 16 : queue(quest_vampire_complete, 0);
                case 17 : queue(hetty_quest_complete, 0);
                case 18 : queue(quest_chompybird_complete, 0);
                case 19 : queue(quest_biohazard_complete, 0);
                case 20 : queue(cog_complete, 0);
                case 21 : queue(itexam_complete, 0);
                case 22 :
                    if (npc_find(0_45_54_45_30, kaqemeex, 7, 0) = true) {
                        queue(druid_quest_complete, 0, npc_uid);
                    }
                case 23 : queue(mcannon_complete, 0);
                case 24 : 
                    queue(crest_complete, 0);
                    // Complete all blast spells and levers, gauntlet choice unselected
                    %crest_spells_levers_gauntlets = calc(pow(2, ^crest_south_lever) - 1);
                case 25 :
                    %arena_progress = ^arena_defeated_genkhazard;
                    queue(arena_quest_complete, 0);
                case 26 : queue(fishingcompo_quest_complete, 0);
                case 27 : 
                    %fluffs_progress = ^fluffs_complete;
                    queue(fluffs_complete, 0);
                case 28 : queue(grandtree_quest_complete, 0);
                case 29 : queue(hazeelcult_quest_complete, 0);
                case 30 : queue(hero_quest_complete, 0);
                case 31 : queue(grail_quest_complete, 0);
                case 32 : queue(junglepotion_quest_complete, 0);
                case 33 :
                    %legends_progress = ^legends_radimus_training_4;
                    queue(legends_quest_complete, 0);
                case 34 : queue(zanaris_quest_complete, 0);
                case 35 : queue(arthur_quest_complete, 0);
                case 36 : queue(drunkmonk_complete, 0);
                case 37 : queue(murder_quest_complete, 0);
                case 38 :
                    stat_advance(crafting, 22500);
                    inv_add(inv, uncut_sapphire, 1);
                    %itgronigen_progress = ^itgronigen_complete;
                    %questpoints = calc(%questpoints + ^itgronigen_questpoints);
                    queue(itgronigen_quest_complete, 0);
                case 39 : queue(quest_elena_complete, 0);
                case 40 : queue(scorpcatcher_quest_complete, 0);
                case 41 : 
                    %seaslug_progress = ^seaslug_complete;
                    %questpoints = add(%questpoints, ^seaslug_questpoints);
                    inv_add(inv, bigoysterpearls, 1);
                    stat_advance(fishing, 71750);
                    queue(seaslug_quest_complete, 0);
                case 42 : queue(sheepherder_complete, 0);
                case 43 : queue(zombiequeen_quest_complete, 0);
                case 44 :
                    def_int $choice4 = ~p_choice2_header("Armadyl.", 0, "Lucien.", 1, "Choose a side for Temple of Ikov:");
                    if ($choice4 = 0) {
                        if (npc_find(0_40_51_13_57, lucien_ardougne, 7, 0) = true) {
                            queue(ikov_armadyl_quest_complete, 0, npc_uid);
                        }
                    } else if ($choice4 = 1) {
                        queue(ikov_lucien_quest_complete, 0);
                    }
                case 45 : queue(desertrescue_complete, 0);
                case 46 : queue(tree_quest_complete, 0);
                case 47 : queue(totem_quest_complete, 0);
                case 48 : queue(upass_quest_complete, 0);
                          inv_add(inv, brokenibanstaff, 1);
                case 49 : 
                    %itwatchtower_progress = ^itwatchtower_complete;
                    inv_add(inv, watchtowerspell, 1);
                    queue(itwatchtower_quest_complete, 0);
                case 50 : queue(waterfall_quest_complete, 0);
                case 51 : queue(ball_quest_complete, 0);
                case default : mes("Unlucky.");
}
